@page "/widget"
@using System.Timers
@using CodeShare.Background.Tasks
@using CodeShare.Extensions
@using CodeShare.Models.Models
@using PrismSharp.Highlighting.HTML

@inject WatchDogService WatchDog;

<PageTitle>Листинг</PageTitle>

@if (_isLongInactive)
{
    <MudAlert Class="mb-2" Variant="Variant.Outlined" Severity="Severity.Error">
        Возникли проблемы при загрузки листинга. Возможно показ был завершен, но все еще пытаемся загрузить данные. <br/> <br/>Вы можете оставаться здесь или либо перейти на другую страницу
        <br/>
        <MudButton Class="mt-4" Size="Size.Small" Href="/" Variant="Variant.Outlined" Color="Color.Error">Главная страница</MudButton>
    </MudAlert>
}

@if (_currentWidget != null)
{
    <div class="card rounded">
        <div class="card-body">
            <h4 class="featureFont">Листинг файла: @_currentWidget.FileName</h4>
            <input readonly="" type="text" value="@_currentWidget.FullPath" class="form-control">
            <MudSwitch @bind-Value="_isShowHistory" Label="Показать историю кода" Color="Color.Info"/>
            @if (_isShowHistory)
            {
                <MudSlider Class="mt-2" @bind-Value="_currentHistory"
                           Min="@(GetCountSilderHistory(false))" Step="1"
                           Max="@(GetCountSilderHistory(true))"
                           Color="Color.Info">@GetTitleFromHistory()
                </MudSlider> 
            }
        </div>
    </div>

    <div style="height: 68vh;" class="mt-4 card rounded">
        <pre style="height: 80vh; white-space: pre-wrap;" class="m-0 language-csharp @((MarkupString)RenderNoCopyClass(_currentWidget is null || _currentWidget.IsCopyable))">
            <code>
                @if (_currentWidget != null)
                {
                    if (_isShowHistory)
                    { 
                        @((MarkupString)RenderTokenizeFromPrism(RenderTokenizeFromHistory(), _currentWidget.FileName.Split('.').Last()));
                    }
                    else
                    {
                        @((MarkupString)RenderTokenizeFromPrism(_currentWidget.Code, _currentWidget.FileName.Split('.').Last()))
                    }
                }
            </code>
        </pre>
    </div>
}
else
{
    <MudProgressCircular Color="Color.Info" Indeterminate="true" Style="margin: 15px;"/>
}

@code
{
    private string? _id;

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Id
    {
        get => _id;
        set
        {
            _id = value;
            _isShowHistory = false;
            _currentHistory = 1;
            _currentWidget = null;
        }
    }

    private int _currentHistory = 1;

    /// <summary>
    /// Текущий листинг
    /// </summary>
    private ListingCode? _currentWidget;

    /// <summary>
    /// Экземпляр таймера
    /// </summary>
    private readonly Timer _timer = new Timer
    {
        Enabled = true
    };

    /// <summary>
    /// Показ сообщения, что долго грузится листинг
    /// </summary>
    private bool _isLongInactive;
    
    /// <summary>
    /// Включение шкалы истории
    /// </summary>
    private bool _isShowHistory;

    private readonly Timer _timeOnDead = new Timer
    {
        Enabled = true,
        Interval = 5000,
    };

    /// <summary>
    /// Экземпляр библиотеки PRISM
    /// </summary>
    private readonly HtmlHighlighter _prism = new HtmlHighlighter();

    /// <summary>
    /// Инициализация компонента, подклчение таймера
    /// и привязка событий для обновлений листинга
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id)) return;

        _timer.Interval = WatchDog.GetTimeWaitFromConfig();
        _timer.Elapsed += OnTimerUpdateWidget;
        _timeOnDead.Elapsed += OnTimeCheckDeadWidget;
        await Task.Delay(0);
    }

    /// <summary>
    /// Метод обрабатывающий проверку мертвый ли листинг
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private async void OnTimeCheckDeadWidget(object? sender, ElapsedEventArgs e)
    {
        _isLongInactive = _currentWidget is null;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Обновление листинга
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private async void OnTimerUpdateWidget(object? sender, ElapsedEventArgs e)
    {
        _currentWidget = WatchDog.GetListingCode(Id ?? string.Empty);
        await InvokeAsync(StateHasChanged);
    }
    
    /// <summary>
    /// Рендеринг красивого кода с подстветкой с помощью
    /// библиотеки PRISM
    /// </summary>
    private string RenderTokenizeFromPrism(string value, string fileExtensions)
        => _prism.Highlight(value, ConvertGrammar.Convert(fileExtensions), "html");
    
    /// <summary>
    /// Рендеринг красивого кода с подстветкой с помощью
    /// библиотеки PRISM
    /// </summary>
    private string RenderTokenizeFromHistory()
        =>  _currentWidget?.History.FirstOrDefault(x => x.Id == _currentHistory)?.Code ?? string.Empty;

    /// <summary>
    /// Рендеринг запрещающего тега для копирования листинга
    /// </summary>
    private string RenderNoCopyClass(bool isCopyable)
        => isCopyable ? string.Empty : "pre-no";

    /// <summary>
    /// Получение минимальной и максимальной истории
    /// </summary>
    /// <param name="showMax"></param>
    /// <returns></returns>
    private int GetCountSilderHistory(bool showMax)
    {
        var min = _currentWidget?.History.FirstOrDefault()?.Id ?? 1;
        var max = _currentWidget?.History.LastOrDefault()?.Id ?? 0;
        return showMax ? max : min;
    }

    /// <summary>
    /// Получение строки с минутами для истории
    /// </summary>
    /// <returns></returns>
    private string GetTitleFromHistory()
    {
        var timeOutMinutes = (TimeOnly.FromDateTime(DateTime.Now) - _currentWidget?
            .History.FirstOrDefault(x => x.Id == _currentHistory)?
            .TimeStampt)?.Minutes;
        return $"{timeOutMinutes} минут назад";
    }
}