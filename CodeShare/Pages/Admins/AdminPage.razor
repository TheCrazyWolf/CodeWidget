@page "/admin"

@using Blazored.LocalStorage
@using CodeShare.DB
@using CodeShare.Services

@inject IConfiguration Config;
@inject NavigationManager Navigation;
@inject ILocalStorageService Storage;
@inject WatchDogService WatchDog;
@inject SqlDbContext Ef;

<PageTitle>Админ-панель</PageTitle>

@if (string.IsNullOrEmpty(WatchDog.GetCurrentTrackingPath()))
{
    <MudAlert Class="mb-2" Variant="Variant.Outlined" Severity="Severity.Warning">Сейчас не ведется трансляция кода</MudAlert>
}
else
{
    <MudAlert Class="mb-2" Variant="Variant.Outlined" Severity="Severity.Info">
        Сейчас транслируется код из директории: @WatchDog.GetCurrentTrackingPath()
        <br/><MudButton Class="mt-2" Size="Size.Small" OnClick="StopService" Variant="Variant.Outlined" Color="Color.Error">Остановить</MudButton>
    </MudAlert>
}

<MudText Class="mt-5" Typo="Typo.button" HtmlTag="h3">Новый проект для отслеживания</MudText>
<div style="border-color: #0c4128" class="card rounded">
    <div class="card-body">
        <MudStack Row="true">
            <MudTextField @bind-value="_newPath" T="string"
                          FullWidth="true" Label="Системный путь"
                          Variant="Variant.Text">
            </MudTextField>
            <MudButton OnClick="ChangePathTracking" Variant="Variant.Outlined" Color="Color.Info">Транслировать</MudButton>
        </MudStack>
    </div>
</div>

<MudText Class="mt-5" Typo="Typo.button" HtmlTag="h3">Последние проекты</MudText>
@foreach (var item in GetHistoryApp())
{
    <div class="mt-2 card rounded">
        <div class="card-body">
            <MudTextField Value="item.Path" T="string"
                          ReadOnly="true"
                          FullWidth="true"
                          Label="@item.Date.ToString()" Variant="Variant.Text">
            </MudTextField>
            <br/>
            <MudStack Row="true">
                <MudButton OnClick="() => ChangePathTracking(item)" Variant="Variant.Outlined" Color="Color.Info">Транслировать</MudButton>
                <MudButton OnClick="() => RemoveFromHistory(item)" Variant="Variant.Outlined" Color="Color.Error">Удалить</MudButton>
            </MudStack>
        </div>
    </div>
}

<MudButton Class="mt-2" OnClick="ClearHistory" Variant="Variant.Outlined" Color="Color.Error">Очистить историю</MudButton>

@code {
    
    /// <summary>
    /// Привязанное боле к Input для ввода нового адреса к папке
    /// </summary>
    private string _newPath = "";
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        
        if (Config.GetValue<string>("Password") != await Storage.GetItemAsync<string>("Password"))
            Navigation.NavigateTo("/admin/login");
    }

    /// <summary>
    /// Смена пути текущего проекта для отслеживания
    /// </summary>
    private void ChangePathTracking()
    {
        if (string.IsNullOrEmpty(_newPath)) return;

        WatchDog.ChangePathForTrackingSafely(_newPath);

        Ef.Logs.Add(new Log
        {
            Date = DateOnly.FromDateTime(DateTime.Now),
            Path = _newPath
        });
        Ef.SaveChanges();
        StateHasChanged();
    }

    private void ChangePathTracking(Log newValue)
    {
        WatchDog.ChangePathForTrackingSafely(newValue.Path);
    }

    /// <summary>
    /// Возращает историю последних проектов из Базы данных
    /// </summary>
    private List<Log> GetHistoryApp()
    {
        return Ef.Logs.OrderByDescending(d => d.Date).Distinct().ToList();
    }

    /// <summary>
    /// Очистка историй проекта
    /// </summary>
    private void ClearHistory()
    {
        Ef.Logs.RemoveRange(Ef.Logs);
        Ef.SaveChanges();
        StateHasChanged();
    }

    private async Task RemoveFromHistory(Log item)
    {
        Ef.Remove(item);
        await Ef.SaveChangesAsync();
    }

    private void StopService()
        => WatchDog.ChangePathForTrackingUnSafely(string.Empty);

}