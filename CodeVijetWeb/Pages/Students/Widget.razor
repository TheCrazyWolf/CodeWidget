@page "/widget"

@using CodeVijetWeb.Models
@using CodeVijetWeb.Services
@using System.Timers
@using PrismSharp.Core
@using PrismSharp.Highlighting.HTML

@inject WatchDogService WatchDog;

<PageTitle>Листинг</PageTitle>

<div class="card shadow-lg rounded">
    <div class="card-body">
        @if (_currentWidget is not null)
        {
            <h4>Листинг файла: @_currentWidget.FileName</h4>
            <input readonly="" type="text" value="@_currentWidget.FullPath" class="form-control">
        }
        else
        {
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
    </div>
</div>

<div style="height: 80vh;" class="mt-4 card shadow-lg rounded">
    <pre style="height: 80vh;" class="m-0 language-csharp @((MarkupString)RenderNoCopyClass(_currentWidget is null || _currentWidget.IsCopyable))">
            <code>
    @if (_currentWidget is not null)
    {
        @((MarkupString)RenderTokenizeFromPrism(_currentWidget.Code))
    }
    else
    {
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    }
            </code>
        </pre>
</div>

@code
{
    [Parameter]
    [SupplyParameterFromQuery]
    public string? PathWidget { get; set; } /* Путь до файла*/

    /* Текущий виджет */
    private ListingCode? _currentWidget;

    private readonly Timer _timer = new() { Interval = 1000, Enabled = true };

    protected override Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(PathWidget))
            return Task.CompletedTask;

        _timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
        {
            _currentWidget = WatchDog.GetCurrentWidget(PathWidget);
            await InvokeAsync(StateHasChanged);
        };

        return Task.CompletedTask;
    }

    /*
     *  Рендерим подсвеченный код с помощью библиотеки
     *  Prism
     */

    private string RenderTokenizeFromPrism(string value)
    {
        var grammar = LanguageGrammars.CSharp;
        var highlighter = new HtmlHighlighter();
        var html = highlighter.Highlight(value, grammar, "html");
        return html;
    }

    /*
     * Рендеринг разрешающиего тега копировать или нет
     */

    private string RenderNoCopyClass(bool isCopyable)
        => isCopyable ? string.Empty : "pre-no";
}