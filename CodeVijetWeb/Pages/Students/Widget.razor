@page "/widget"

@using CodeVijetWeb.Models
@using CodeVijetWeb.Services
@using System.Timers
@using PrismSharp.Core
@using PrismSharp.Highlighting.HTML

@inject WatchDogService WatchDog;

<PageTitle>Листинг</PageTitle>

@if (_isLongInactive)
{
    <MudAlert Severity="Severity.Error">Ого! Кажется листинг загружается дольше чем ожидалось. Возможно трансляция кода уже прекратилась, но попытки продолжаются.  
        <br/>
        <MudButton Class="mt-2" Size="Size.Small" Href="/" Variant="Variant.Outlined" Color="Color.Error">Главная страница</MudButton>
    </MudAlert>
}

@if (_currentWidget != null)
{
    <div class="card rounded">
        <div class="card-body">
            <h4>Листинг файла: @_currentWidget.FileName</h4>
            <input readonly="" type="text" value="@_currentWidget.FullPath" class="form-control">
        </div>
    </div>

    <div style="height: 68vh;" class="mt-4 card rounded">
        <pre style="height: 80vh; white-space: pre-wrap;" class="m-0 language-csharp @((MarkupString)RenderNoCopyClass(_currentWidget is null || _currentWidget.IsCopyable))">
            <code>
                @if (_currentWidget != null)
                {
                    @((MarkupString)RenderTokenizeFromPrism(_currentWidget.Code))
                }
            </code>
        </pre>
    </div>
}
else
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}

@code
{
    [Parameter] [SupplyParameterFromQuery] public string? Id { get; set; }

    /// <summary>
    /// Текущий листинг
    /// </summary>
    private ListingCode? _currentWidget;

    /// <summary>
    /// Экземпляр таймера
    /// </summary>
    private readonly Timer _timer = new()
    {
        Enabled = true
    };

    private bool _isLongInactive = false;
    private readonly Timer _timeOnDead = new()
    {
        Enabled = true,
        Interval = 5000,
    };

    /// <summary>
    /// Экземпляр библиотеки PRISM
    /// </summary>
    private readonly HtmlHighlighter _prism = new();

    /// <summary>
    /// Инициализация компонента, подклчение таймера
    /// и привязка событий для обновлений листинга
    /// </summary>
    protected override Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Id))
            return Task.CompletedTask;

        _timer.Interval = WatchDog.GetTimeWaitFromConfig();
        _timer.Elapsed += async (object? sender, ElapsedEventArgs e) =>
        {
            _currentWidget = WatchDog.GetListingCode(Id);
            await InvokeAsync(StateHasChanged);
        };

        _timeOnDead.Elapsed += async (object? sender, ElapsedEventArgs e) =>
        {
            _isLongInactive = true;
            await InvokeAsync(StateHasChanged);
        };
        
        return Task.CompletedTask;
    }

    /// <summary>
    /// Рендеринг красивого кода с подстветкой с помощью
    /// библиотеки PRISM
    /// </summary>
    private string RenderTokenizeFromPrism(string value)
        => _prism.Highlight(value, LanguageGrammars.CSharp, "html");

    /// <summary>
    /// Рендеринг запрещающего тега для копирования листинга
    /// </summary>
    private string RenderNoCopyClass(bool isCopyable)
        => isCopyable ? string.Empty : "pre-no";

    
    
}