@page "/admin"
@using CodeVijetWeb.DB;
@using CodeVijetWeb.Services

@inject IConfiguration Config;
@inject WatchDogService WatchDog;
@inject SqlDbContext Ef;

<PageTitle>Админ-панель</PageTitle>

@* Обработка и вывод исключений на экран *@
@if (!string.IsNullOrEmpty(_stringExceptionMessage))
{
    <div class="mt-2 mb-2 alert alert-danger" role="alert">
        @_stringExceptionMessage
    </div>
}

@if (_isAuthorized)
{
    @* Мини админ панель *@

    <h4 class="mt-4">Текущий проект для отслеживания</h4>
    <div class="card shadow-lg rounded">
        <div class="card-body">
            <label>Путь до папки с проектом для отслеживания</label>
            <div class="mt-2 d-flex">
                <input @bind="_newPath" type="text" class="form-control" placeholder="C:\Users\kulagin\RiderProjects\Api-Client-for-samgk.ru">
                <button @onclick="ChangePathTracking" type="button" class="ms-2 btn btn-primary">Сохранить</button>
            </div>
        </div>
    </div>

    <div class="mt-4">
        <h4>Последние проекты:</h4>
    </div>
    foreach (var item in GetHistoryApp())
    {
        <div class="mt-4 card shadow-sm rounded">
            <div class="card-body">
                <input readonly type="text" value="@item" class="form-control">
            </div>
        </div>
    }
    <div class="mt-4">
        <button @onclick="ClearHistiry" class="btn btn-primary">Очистить историю</button>
    </div>
}
else
{
    @* Экран входа *@
    
    <div style="height: 95vh;" class="d-flex align-items-center justify-content-center">
        <div class="card shadow-lg rounded">
            <div class="card-body">
                <label>Введите админ-пароль</label>
                <div class="mt-2 d-flex">
                    <input @bind="_password" type="password" class="form-control" placeholder="Пароль">
                    <button @onclick="CheckPassword" type="button" class="ms-2 btn btn-primary">Войти</button>
                </div>
            </div>
        </div>
    </div>
}


@code {

    /// <summary>
    /// Хранение статуса, авторизован ли пользователь
    /// </summary>
    private bool _isAuthorized;

    /// <summary>
    /// Привязанное боле к Input для ввода пароля
    /// </summary>
    private string _password = "";

    /// <summary>
    /// Привязанное боле к Input для ввода нового адреса к папке
    /// </summary>
    private string _newPath = "";

    /// <summary>
    /// Сообщение об ошибке, исключений и т.д.
    /// </summary>
    private string _stringExceptionMessage = "";

    /// <summary>
    /// Проверяем пароль админа
    /// </summary>
    private void CheckPassword()
    {
        if (Config.GetValue<string>("Password") != _password)
            return;

        _isAuthorized = true;
        StateHasChanged();
    }

    /// <summary>
    /// Смена пути текущего проекта для отслеживания
    /// </summary>
    private void ChangePathTracking()
    {
        if (!_isAuthorized)
            return;

        WatchDog.ChangePathForTracking(_newPath);

        if (string.IsNullOrEmpty(_newPath))
            return;

        try // сохраним в  бд  
        {
            Ef.Logs.Add(new Log { Date = DateOnly.FromDateTime(DateTime.Now), Path = _newPath });
            Ef.SaveChanges();
        }
        catch (Exception e)
        {
            _stringExceptionMessage = e.Message;
            StateHasChanged();
        }
    }


    /// <summary>
    /// Возращает историю последних проектов из Базы данных
    /// </summary>
    private List<string> GetHistoryApp()
    {
        try // сохраним в  бд  
        {
            return Ef.Logs.OrderByDescending(d => d.Date).Select(x => x.Path).Distinct().ToList();
        }
        catch (Exception e)
        {
            _stringExceptionMessage = e.Message;
            StateHasChanged();
        }

        return new List<string>();
    }

    /// <summary>
    /// Очистка историй проекта
    /// </summary>
    private void ClearHistiry()
    {
        try // получим из бд
        {
            Ef.Logs.RemoveRange(Ef.Logs);
            Ef.SaveChanges();
        }
        catch (Exception e)
        {
            _stringExceptionMessage = e.Message;
            StateHasChanged();
        }
    }

}